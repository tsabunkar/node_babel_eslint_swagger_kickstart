{"version":3,"sources":["../server/app.js"],"names":["require","mongoose","app","connect","process","env","MONGODB_URI","then","console","log","catch","use","bodyParser","json","urlencoded","extended","req","resp","next","setHeader","swaggerUi","serve","setup","swaggerDocument","explorer","invoiceRoute","normalizePort","port","parseInt","val","isNaN","PORT","set","server","http","createServer","listen"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAMA;;;;AAXAA,QAAQ,iBAAR;;AAKyB;;eAIrBA,QAAQ,sBAAR,C;IADAC,Q,YAAAA,Q;;AASJ,IAAMC,MAAM,wBAAZ;;AAGAD,SAASE,OAAT,CAAiBC,QAAQC,GAAR,CAAYC,WAA7B,EAA0C;AAA1C,CACKC,IADL,CACU,YAAM;AACRC,YAAQC,GAAR,CAAY,mBAAZ,EADQ,CAC0B;AACrC,CAHL,EAIKC,KAJL,CAIW,YAAM;AACTF,YAAQC,GAAR,CAAY,0BAAZ,EADS,CACgC;AAC5C,CANL;;AAUAP,IAAIS,GAAJ,CAAQC,qBAAWC,IAAX,EAAR,E,CAA4B;AAC5B;;AAEAX,IAAIS,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAAE;AAC5BC,cAAU;AADgB,CAAtB,CAAR;;AAKA;AACAb,IAAIS,GAAJ,CAAQ,UAACK,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAqB;AACzB;AACAD,SAAKE,SAAL,CAAe,6BAAf,EAA8C,GAA9C,EAFyB,CAE2B;AACpDF,SAAKE,SAAL,CAAe,8BAAf,EAA+C,+DAA/C,EAHyB,CAGwF;AACjHF,SAAKE,SAAL,CAAe,+BAAf,EAAgD,uBAAhD,EAJyB,CAIiD;AAC1EF,SAAKE,SAAL,CAAe,8BAAf,EAA+C,wCAA/C;AACAD;AACH,CAPD;;AAWA;AACA;AACAhB,IAAIS,GAAJ,CAAQ,WAAR,EAAqBS,2BAAUC,KAA/B,EAAsCD,2BAAUE,KAAV,CAAgBC,iBAAhB,EAAiC;AACnEC,cAAU;AADyD,CAAjC,CAAtC;;AAIA;AACA;AACAtB,IAAIS,GAAJ,CAAQ,cAAR,EAAwBc,qBAAxB;;AAKA;AACA,IAAMC,gBAAgB,SAAhBA,aAAgB,MAAO;AACzB,QAAMC,OAAOC,SAASC,GAAT,EAAc,EAAd,CAAb;AACA,QAAIC,MAAMH,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOE,GAAP;AACH;AACD,QAAIF,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;AACD,WAAO,KAAP;AACH,CAXD;;AAcA,IAAMI,OAAOL,cAActB,QAAQC,GAAR,CAAY0B,IAAZ,IAAoB,MAAlC,CAAb;;AAEA7B,IAAI8B,GAAJ,CAAQ,MAAR,EAAgBD,IAAhB,E,CAAuB;;AAEvB,IAAME,SAASC,eAAKC,YAAL,CAAkBjC,GAAlB,CAAf,C,CAAuC;;AAEvC+B,OAAOG,MAAP,CAAcL,IAAd,E,CAAqB","file":"app.js","sourcesContent":["require('./config/config');\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport swaggerDocument from './config/swagger.json';\r\nimport http from 'http'; // nodejs package, require() -> nodejs function\r\n\r\nconst {\r\n    mongoose\r\n} = require('./db/mongoose_config');\r\n\r\nimport {\r\n    invoiceRoute\r\n} from './routes/invoice.routes';\r\n\r\n\r\n\r\nconst app = express();\r\n\r\n\r\nmongoose.connect(process.env.MONGODB_URI) // connecting to mongodb db atlas\r\n    .then(() => {\r\n        console.log('connected to db !'); // eslint-disable-line\r\n    })\r\n    .catch(() => {\r\n        console.log('failed to connect to db!'); // eslint-disable-line\r\n    });\r\n\r\n\r\n\r\napp.use(bodyParser.json()); // !middleware which parses incoming request in JSON format, this body-parser middleware must be\r\n// !registered with express so wrote inside app.use();\r\n\r\napp.use(bodyParser.urlencoded({ // to parse\r\n    extended: false\r\n}));\r\n\r\n\r\n// !CORS error-\r\napp.use((req, resp, next) => {\r\n    // before contiuing the request to next middle ware just written below this middleware want to remove CORS error\r\n    resp.setHeader('Access-Control-Allow-Origin', '*'); // allowing access to all the url/paths\r\n    resp.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization'); // it may have this headers key\r\n    resp.setHeader('Access-Control-Expose-Headers', 'max-records, my-token'); // Allowing to custom-header expose to frontend\r\n    resp.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE, PUT, OPTIONS');\r\n    next();\r\n});\r\n\r\n\r\n\r\n// !Swagger-UI\r\n// http://localhost:3000/api-docs/\r\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, {\r\n    explorer: true\r\n}));\r\n\r\n// !filter routes with '/api/invoice' -> redirect to invoiceRoute\r\n// http://localhost:3000/api/invoice\r\napp.use('/api/invoice', invoiceRoute);\r\n\r\n\r\n\r\n\r\n// validating the PORT\r\nconst normalizePort = val => {\r\n    const port = parseInt(val, 10);\r\n    if (isNaN(port)) {\r\n        // named pipe\r\n        return val;\r\n    }\r\n    if (port >= 0) {\r\n        // port number\r\n        return port;\r\n    }\r\n    return false;\r\n};\r\n\r\n\r\nconst PORT = normalizePort(process.env.PORT || '3000');\r\n\r\napp.set('port', PORT); // setting port\r\n\r\nconst server = http.createServer(app); // create node server which uses express\r\n\r\nserver.listen(PORT); // start the server"]}